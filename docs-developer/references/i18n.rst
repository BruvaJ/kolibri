
.. _i18n:

Internationalization
====================

As a platform intended for use around the world, Kolibri has a strong mandate for translation and internationalization. As such, it has been designed with technologies to enable this built in.


Backend Translation
-------------------

For any strings in Django, we are using the standard Django i18n machinery (gettext and associated functions) to provide translations. See the `Django i18n documentation <https://docs.djangoproject.com/en/1.10/topics/i18n/>`_ for more information.


Frontend Translation
--------------------

For any strings in the frontend, we are using `Vue-Intl <https://www.npmjs.com/package/vue-intl>`_ an in house port of `React-intl <https://www.npmjs.com/package/react-intl>`_.

Within Kolibri, messages are defined on the body of the Vue component:

- ``$trs``, an object of the form::

    {
      msgId: 'Message text',
    }

- ``name``, we use the Vue component name to namespace the messages.

The ``name`` and every ``msgId`` should be in camelCase.

User visible strings should be rendered directly in the template with ``{{ $tr('msgId') }}``. These strings are collected during the build process, and bundled into exported JSON files. These files are then uploaded to Crowdin for translation.

An example Vue component would then look like this::

  <template>

    <div>
      <p>{{ $tr('exampleMessage') }}</p>
    </div>

  </template>


  <script>

    module.exports = {

      name: 'example',
      $trs: {
        exampleMessage: 'This message is just an example',
      },
    };

  </script>


  <style lang="stylus" scoped></style>

In order to translate strings outside of the scope of Vue components, i.e. in Javascript source files, the name space and messages object still need to be defined, as shown in this example::

  import { createTranslator } from 'kolibri.utils.i18n';

  const name = 'exampleTitles';

  const messages = {
    msgIdForThisMessage: 'This is a message',
  };

  const translator = createTranslator(name, messages);

  console.log(translator.$tr('msgIdForThisMessage'));

In this way, messages are namespaced, and then available off the ``$tr`` method of the translator object returned from the createTranslator function.

These messages will then be discovered for any registered plugins and loaded into the page if that language is set as the Django language. All language setting for the Frontend is based off the current Django language for the request.


.. _crowdin:

Translation CrowdIn workflow
----------------------------

Translations are maintained in release branches on CrowdIn in the following projects:
  
* `CrowdIn: kolibri <http://crowdin.com/project/kolibri>`__
* `CrowdIn: kolibri-docs <http://crowdin.com/project/kolibri-docs>`__

In order to pull the latest messages, invoke the following commands, fetching your API key using `these instructions <https://support.crowdin.com/api/api-integration-setup/>`__. Notice that you have to specify from which branch you are pulling the translations.

.. code-block:: bash

    $ CROWDIN_API_KEY="your-secret-key" make translation-pull crowdin-branch=release-v0.7.x

.. warning:: By default Crowdin will download all translations, not just approved ones, and will often download untranslated strings also. Do not just add all the files that are downloaded, as this will lead to untranslated and poor quality strings being included.


Translation workflow prerequisites
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Translation relies on having `crowdin-cli <https://support.crowdin.com/cli-tool/>`__ available as a jar, and you need Java to run this. Make sure you have completed the following steps:

.. code-block:: bash
  
    # Install crowdin-cli
    $ make translation-install-crowdin-cli
    # Install docs requirements
    $ pip install -r requirements/docs.txt

.. note:: The Make shortcuts for working with translation are not set up for Windows. The configured paths etc. are different on a Windows system, so you have to both rewrite the `CrowdIn Configuration <https://support.crowdin.com/configuration-file/#cli-2>`__.



.. _new_language:

Adding a new language
---------------------

In order to add a new supported language to Kolibri, the appropriate language information object must be added to the array in ``kolibri/locale/supported_languages.json``.

The language must be described using the following keys, with everything in lower case::

  {
    "language_code": "<Two or three letter language code>",
    "territory_code": "<Optional: Language territory code>",
    "language_name": "<Language name in the target language>",
    "script_code": "<Optional: Language script code>"
  }

Any time a language is added to supported languages the command ``yarn run generate-locale-data`` must be run, and the resulting file changes committed to the code base.

If a language is added that is not part of the natively supported languages for Django, then a Django mo file must be compiled for that language using ``make compilemessages``, and the resulting mo file committed to the code base.
